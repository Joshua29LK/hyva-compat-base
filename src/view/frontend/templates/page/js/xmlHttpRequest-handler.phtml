<?php
//  @codingStandardsIgnoreFile
declare(strict_types=1);
/**
 * BSS Commerce Co.
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the EULA
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://bsscommerce.com/Bss-Commerce-License.txt
 *
 * @category   BSS
 * @package    Hyva_BssRewardPoint
 * @author     Extension Team
 * @copyright  Copyright (c) 2022 BSS Commerce Co. ( http://bsscommerce.com )
 * @license    http://bsscommerce.com/Bss-Commerce-License.txt
 */

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;

/** @var Escaper $escaper */
/** @var Template $block */

$baseVm = $viewModels->require(\Bss\HyvaCompatBase\ViewModel\Base::class);
$store = $baseVm->getStore();
?>

<script>
    'use strict';

    function responseSerialize(response) {
        if (response.redirected) {
            window.location.href = response.url;
        } else if (response.ok) {
            return response.json();
        } else {
            // Check if result is Promise then throw to new Error
            let defaultErrMsg = '<?= __('Something went wrong. Please contact the website admin for more information.') ?>',
                result;
            result = response.text();
            if (typeof result?.then === 'function') {
                result.then(res => {
                    let errorMessage;
                    try {
                        errorMessage = JSON.parse(res);
                        errorMessage = errorMessage?.message ? errorMessage.message : defaultErrMsg;
                    } catch (e) {
                        errorMessage = defaultErrMsg;
                    }
                    window.dispatchMessages([
                        {
                            type: 'error',
                            text: errorMessage
                        }
                    ], 3000);
                });
            } else {
                throw new Error(defaultErrMsg);
            }
        }
    }

    if (typeof window.buildRestAPIUrl !== 'function') {
        window.buildRestAPIUrl = function (url, params = {}) {
            const method = 'rest',
                storeCode = '<?= $escaper->escapeJs($store->getCode()) ?>',
                version = 'V1',
                serviceUrl = ':method/:storeCode/:version';

            let urlParts;

            params.method = method;
            params.storeCode = storeCode;
            params.version = version;

            url = serviceUrl + url;

            urlParts = url.split('/');
            urlParts = urlParts.filter(Boolean);

            Object.entries(urlParts).forEach (entry => {
                let [key, part] = entry;
                part = part.replace(':', '');

                if (params[part] !== undefined) {
                    urlParts[key] = params[part];
                }
            });

            return urlParts.join('/');
        }
    }

    if (typeof window.isObjectEmpty !== 'function') {
        window.isObjectEmpty = function (obj) {
            return (
                Object.prototype.toString.call(obj) === '[object Object]' &&
                JSON.stringify(obj) === '{}'
            );
        }
    }

    if (typeof window.mergeDeep !== 'function') {
        /**
         * Deep merge two objects.
         *
         * @param target
         * @param sources
         * @returns {*}
         */
        window.mergeDeep = (target, ...sources) => {
            /**
             * Simple object check.
             *
             * @param item
             * @returns {boolean}
             */
            const isObject = (item) => {
                return (item && typeof item === 'object' && !Array.isArray(item));
            };

            if (!sources.length) return target;
            const source = sources.shift();

            if (isObject(target) && isObject(source)) {
                for (const key in source) {
                    if (isObject(source[key])) {
                        if (!target[key]) Object.assign(target, { [key]: {} });
                        mergeDeep(target[key], source[key]);
                    } else {
                        Object.assign(target, { [key]: source[key] });
                    }
                }
            }

            return mergeDeep(target, ...sources);
        }
    }
</script>
